import itertools

def Text(text,i,k):
  return text[i:(i+k)]

def HammingDistance(p,q):
  if len(p)!=len(q):
    return -1
  
  dist=0
  for i in range(len(p)):
    if p[i]!=q[i]:
      dist+=1
  
  return dist

def ReverseComplement(pattern):
  cPattern=""
  for element in pattern:
    if element=="A":
      cPattern=cPattern+"T"
    if element=="T":
      cPattern=cPattern+"A"
    if element=="C":
      cPattern=cPattern+"G"
    if element=="G":
      cPattern=cPattern+"C"
  
  revPattern=cPattern[::-1]
  return revPattern

def GenerateArray(k):
  base=["A","C","G","T"]
  array=list()
  comb=[p for p in itertools.product(base,repeat=k)]

  for element in comb:
    pattern=""
    for i in range(0,len(element)):
      pattern=pattern+element[i]
    array.append(pattern)
  return array

def MismatchesReverseComplementFrequent(text,k,d):
  countD=dict()
  kmers=GenerateArray(k)

  for i in range(0,4**k):
    kmer=kmers[i]
    count=0
    countR=0
    for j in range(0,len(text)-k+1):
      pattern=Text(text,j,k)
      rcPattern=ReverseComplement(pattern)
      if HammingDistance(kmer,pattern)<=d:
        count+=1
      if HammingDistance(kmer,rcPattern)<=d:
        countR+=1
    countD[kmer]=count+countR

  max=0
  for v in countD.values():
    if v>max:
      max=v

  words=[]
  for k,v in countD.items():
    if v==max and k not in words:
      words.append(k)
  return words   

res=MismatchesReverseComplementFrequent(input(),int(input()),int(input()))
for element in res:
  print(element,end=" ")
