def Row(char):
  if char=='A':
    return 0
  if char=='C':
    return 1
  if char=='G':
    return 2
  if char=='T':
    return 3

def Probability(kmer,profile):
  prob=1
  for i in range(0,len(kmer)):
    char=kmer[i]
    row=Row(char)
    prob=prob*profile[row][i]
  return prob

def MaxNumOccOfLetterInCol(motifs,j):
  countACGT=[0,0,0,0]
  for i in range(0,len(motifs)):
    if motifs[i][j]=='A':
      countACGT[0]+=1
    elif motifs[i][j]=='C':
      countACGT[1]+=1
    elif motifs[i][j]=='G':
      countACGT[2]+=1
    else:
      countACGT[3]+=1
  return max(countACGT)

def Score(motifs):
  score=0
  for i in range(0,len(motifs[0])):
    score=score+(len(motifs)-MaxNumOccOfLetterInCol(motifs,i))
  return score

def FormProfileWithPseudocounts(strings):
  n=len(strings)
  k=len(strings[0])
  profile=[]
  for m in range(0,4):
    profileRow=[1]*k
    for i in range(0,k):
      for j in range(0,n):
        row=Row(strings[j][i])
        if m==row:
          profileRow[i]+=1
      profileRow[i]=profileRow[i]/(n+4)
    profile.append(profileRow)
  return profile

import random
from random import randint

def Random(N):
  return randint(0,N)

def ProfileRandom(seq,k,profile):
  kmers=[]
  probabilites=[]
  for i in range(0,len(seq)-k+1):
    kmers.append(seq[i:(i+k)])
    probabilites.append(Probability(seq[i:(i+k)],profile))
  return random.choices(kmers,weights=probabilites)[0]

def GibbsSampler(dnaList,k,t,N):
  n=len(dnaList[0])
  motifs=[]
  bestMotifs=[]
  for i in range(0,t):
    position=Random(n-k)
    motifs.append(dnaList[i][position:(position+k)])
  bestMotifs=motifs
  for j in range(0,N):
    i=Random(t-1)
    del motifs[i]
    profile=FormProfileWithPseudocounts(motifs)
    motifs.insert(i,ProfileRandom(dnaList[i],k,profile))
    if Score(motifs)<Score(bestMotifs):
      bestMotifs=motifs
  return bestMotifs

input="""15 20 2000
ACCGTCGATCTTTATTAGGAGGACGCGAGATAGTTAGTCAGAGTGTATCCCAGTAGGTGGAACGAGCCGGCCACTTGACGGGTCGAGAGAATCATCTCACCCCCTTTCACATCAATCATTAAGAAACTATTGTCTAATTAAGTCCGACTTTGACTATAAGTGTGAATTAGAAAGCGTGGGTACTCTTAGAGGCTCGTTTCAGTGTTCGAAGCTCTTATGCGAAGCAACCCGGGCTGGCAGCGTTTGCCGCGTATCTGGAATGTCGCAACCTTGGCCCCAGAAATGACCAAGCGAGCATTGTACATATCTTATGTTCACCGTCGATCTTTAT
TAGGAGGACGCGAGATAGTTAGTCAGAGTGTATCCCAGTAGGTGGAACGAGCCGGCCACTTGACGGGTCGAGAGAATCATCTCACCCCCTTTCACATCAATCATTAAGAAACTATTGTCTAATTAAGTCCGACTTTGACTATAAGTGTGAATTAGATCGATGGCGTAACGTAAGCGTGGGTACTCTTAGAGGCTCGTTTCAGTGTTCGAAGCTCTTATGCGAAGCAACCCGGGCTGGCAGCGTTTGCCGCGTATCTGGAATGTCGCAACCTTGGCCCCAGAAATGACCAAGCGAGCATTGTACATATCTTATGTTCACCGTCGATCTTTAT
TCCGTACTCTTGCAAATTTTGCTCGTAACCGTAACGTAGTTATTAGCGCCTAGTAGTTGATTAGGCAAGGTAAATGCTCGGCAATTAACGTCAGGACACAAATTTAAAGCACTGGGGGCCTTGAGGGTTGCGAACACACAACAGACCTACGCAGCCACCGGACCGGCGGGGCCTGCGCTATCGCCGACGGCGGACCCGTAAAAGAGGCATACCTAAGCTTTACGATGCCCTATGTAGATATAAGCATTGCATCAGAGCCGCTGTGTAATACCAGTCTTATCCATTATCATCCCGCGCCATGTCCTCGGGCTTACTACCATACCTTGATTAG
TTACACTTTGGAACCCATATGCGTAGCTTTGAATGAACGGCAGAGGTTTACCAATACGACAGGAATCTAACGCTTGGAGTGGCTCGTGATCTAACGCGTAACGTTACGCCCATGGGTTTGTCCTTAATACCATCCGGTAACACACCCGTAGAAGACAACTCTATCGTAGGGAGCCAGATGCTGCCTGCGCCTTCACTGGTACTAACATTTCGTGAATAATCAATCAAGCGATAACCCTTTAAATGCCAGGGTGCTTTTGGGTGTACCGACAATAGTGACATCCGGGAAGGGCCCAGGGGTCACGATTAATCAGAGGTCAAATGCTCTGCCA
GCAATGCCGAGCTGAATAAAATTGCCGGTTAGCTTAGGATTGGCACTGCTAGTTTCGTATGTGCGTTCACATTAAGTTTATCCGATCCAATTACGTAGCCGGAGGTCCCTCTGAGTGTACCTTCTACTTATGAGTTAACTGTGGTACGGCGCTTGCTTCATGGTTCCAATTGCATGTACGAGCGGTCATCAGGGCTGAGTGTAGACCGAACTTTCTAATATTTTATAAATAAGGGCCGAATTAATTTCTGAGGTTCATCGGAGGAGTTTCAGCGGGATGGTCGGCGTTCATCCAACTCTCGTGCGCTAGACGTAGACCTCGGGCATTTGAG
GGACGGGGCTTCATTTGCCCAGCTGCGCTAGCGGCTGGTAACTGATAGGTACATTACCACATCAGCAATAGCCTGATAAGGAGACGCCCATGTGGTGGGACTATAGCGGGCACTGTGTCTATCAAACAGTCACGTTAAACTAGCGGATTAGGAACTGAGAGGTGGATGCTGGTTGTGAGCCTTTTACGTGCTAACGTGCTACGAAGTGCGGCGCGTAACGTCGCTAAACGGATATCAATATTACTGTGACGACACGAGGAGACTCCATTCAATATTGTACTTAGACCAGAGTACATCACATAGTTGAGTGGATCCTGTGCAGAAAGCGCGC
AGCCATCGATCAGATTTTCCGATAGTCTTAGTGAATTTGGCGACTAGGCTTCCCTGCGCTGAGAGGAACACTCAACCCCTATAAGGGGATTTTCTGTCTGGCTGAGGCGTTCCTCCGTAATGGAAACAGACAGCTCTTACCCACCCTGATGCTGAATCGTGCGCGTAAATGGGAGAACCCATCGCGTGGTATTATGGTGCTGGCAGTTCAACCTCTTACCGTCAGTAGTGACCTATCTGCGCGCCCGGATCCGTAGCGGGTCGACAACATTGAAGAAGGCATCCACACATTTTCCACGGCCGAACATACCTTTACGGAGCAGACAGACCGG
TACAAAGCAATTATCGCCCTAGCAACCGATGTATCCATGCCGTTCTGTACATCACAATAGCATTCCCATTTAGCTCTCGTGCGGCAAACGTCCCGGTGTGACGTCAAACCGAATGCCGATCGCCTGTAGCTACATTAGACTAAGGAACGGCGTAGGCTAAATGGCAATTCGGCACTATGTCTGTTGTGACCGAATTTCGCACTTCGAATAGCTTACTGGCGGAACGAACGCAGCGATACTGTGTTCTATGATACTGAATAAGATGGCCAGTGGGGTTCTTTGCTCAGCGGGCAGCAACAGGCACAAGGCAGGCGTGACATTGTCTCTAGCC
AAAGATTTATAGAATTGATAGGTCAATCAATGAATAAAGGCGGGACTTAAGCTTAGTGGCCTCAGTCTACATCGCCGACGTTTGAAGTGTCGTGCAGATAACGTACGACCCCTCGCAGTGACAGCGATTTTATGCCTGCATGTGTATCGTGATTACCATCGTATACCACGCCTCCAACGCCGGAGGTCGATAACCGAGGGAAAGAACGAGATAAATTGGTGGTCTCATTGCACGGCTAGTACGATACATGATTGGCGTTGCAGACCTATCTACCAAGGGCTCTACGAGTCACTACACGTCGGGAGGTAATGTGCCGATGCCGCTCAGCATG
ACGCTACACTTAACACGTGCGCGTAACTACTCGCCGGCTGCTTAGCCGGGCCGACTACTGAGCGCGGAGGTACTCGACTGCGTGGTATCGCAGGTTGCTTGCCGCTTCAGTACTAATTAGCTCTAAACGGGGGTGGTACCGTGCTTTAAACGTGGCAAAGTGTAAGTTGGAACAGGCTTGCCTTCGACGGTATTATAGTGCAGCGTTGAATTAGGCGCTCTACTTTCACCTGATGCGGGTATATAACAGACGCGACGGGTGAACGCCCGGAATAAGCCAGATTAGAGTGAGGAAAAGGTACGAAGTTGAATTCGCTAATTACGGTCGTGCA
GGGGTATTCCATCTCTCCTGTCGTGACATGAATTGGAAGTCCGCGGTAGCGCTACAGAAGAGCAGAAGTTATCCTGTGTCTCGGCTACAGATCACGAAAATAACGATGGAACTAAGCTCCTGTAGATACAATAGCCGCCTGTGTGCGACTGCAACCCCGTGCGGAGGGTCGTAGGGGGGAACCGGGTTCTAGTCTCGGCTTCCAACCAATAGACTGGGATATGAGAAGACCGGTCACGCTTACAGAACGATCGCTGTGTTCCAATGCGATTCCTCGGAAGAAAATCTCCCATATATTTAGTGCCAATTTATTTCGTGATTGTAACGTCAGT
TCGTAGTGCCCGTCTCCGACGTCCATAACAAGTAACAACCGAAAGACTGAGATCGTTTACCGAAGTTGGTCATGTTACTTAGTAGCCGCAATCAATGAGCGGTCGAGGGCAATGCAGAACCGGCACACAAAGTAACTGCAGTCTCGAGTTGTCGGTTCTTCTTCAAAGTAACAGGTAGCAGTTACATAGCCGTGCCCCCAAGTCCGTAATATAGGCTGGGACCAACCTCGAGCGTTCGGCCTTGAACTGCGGTGCAACGATGCCCACGGACCTGGCTGGCTAATAAAAGTCGTGCGCGATGCGTCTAGGAGGGGACAATGTAATCGACTAA
AATAGCTTATTTTACTTCACTAGATGTCCTAGGGGCCCAGTTGTGTCGTCATCGTAACGTGCGAACTCCGTCTATAATAGATAATTCCAAGAGGTCCGCAGGGCGTCGTAACACTTACCAACCGTGAGTAGCAAGTCGAGGCTCGCCTGGTGTATTTACCCCCAAGTTGATTCGCTAGAGCGGCAAGAGGAATGGCACAATCTTCACACGTTACTTCTTGCAGTGCCATCCGACTTAATGCAAGGTAAGTCGCATCTCGTAGCTCTGTCGTCAAATTATTCATCAACCCACACATCTGTCCGCTGGCTCATCTCGCCGGCACGTTTTTTGG
GTCATCGATCGAGGGCTCAGTAGACATCGGCGGATTGGCCCCACGGAGTCTTGAGTACGGTATAGCTCGTCTCTGGGTGCATGACATTTATTATGCAAAGTGGAACTGCGACTAGGCGGGTTAGTCCGTTATAGGTTAACGTAGTAGATTCCGGTTGCGCGTAACGTCGGCCGTGAAAGGAGTAAAAGGAGGAAGTGAACAGTGTGCACGAGATCGGTTGTTGACGTTCGAGTCGTGGTAGAGCGGGTTACCCAGATGAATACACTTTCACTTCTCGACTTCGGCCAGGAGCAAGTGGATGAAAAGATACGCCGTACCCTGCTATGGGTCC
CAGTAGATGTGGACATTATCGCAGGGTTAGTGGCGCGTAAATGTAGGGGGTGGAAAGGGAACGCGACGCACAATTGTTAGTTTTGTAGAGTATTTATTACGTAAATCCTTTACCCCGATGACGAAACCCAAGACATCGGACGTGATAATAAGGGCACTCGTGCGCGTGCGGTCCTTACTGATATCATGGTCAATCCTGTCTCCCCCTATACCGCTTGCGGCGAACGTGACTCAGTCTAACCGGTTAGTTGGGGCACCGTCGAAATTACGCAGCAGGTAGACGTTCAACATTGTCACGGAAGGGCGCGCGCTTACGGCTCATCTGCCTCGCA
CGTCGTGTCTGACCATACGAGTTCAGTCCCTGACGCTAAAGCCAGGGATATATATACCTCGTGCGCGTATTATCGAAGTGCATCGCGCGGAATCTTGGTGTGGCTAAAATTGTGCAATAAGCGGAAAAAAGGCGGATATCAGCTTCACATAGATTTCATGGAGGGGTCAGCCGATCGTAAGGCGAATGATCCGTTAGACATGGAATCGATCCTGTAGCCATGGGCCGTCTTCCTTTGCTTTTCTACCAATGCTCAGTCTTATATTGATCATAAGGACGTATCACCACGCTACTGAACAAAGTCTTCCGCCGGTAGAGGGTGAGAAAAAGAT
GGCACAAGTAGGGGTGATGCGAAACAGTTGCTCTTCCTCAAAGTCTCCCTCCCAATTCGACTAGCCCGATAGACTCAGATACATCTCTTGATCTGTCCTCCGACGTTATTCTATAACCGTGTGCGCGTAACGAGCAATCGCGCAGATCGCTCGGGTCGCTTGCTATCTCACATCAAACGGGTTTCCGATCACCACCTCTCTCCTAAAGCTCCGGGTTCCGATAGCACAGTGAAATCAGCACCCTCTAGTGCGTAAACTACGTCGCCCTTTCAACCACACGTCAGCTATTTTTGAAACGAACCAAGCTTTACCTTGCAGGCTCTGGGAGGTT
GTCTTACTATTCGAGAGCTTCTAATGCGGTGAAGGTGTCGTGCAGCTAACGTCCTTATAGGTAGGGGAATGATAAGCTGTGTCCGAAGTTACCCCCCTGCCTGTCGACTACCGAACCTGGACGAGGGTTGTATCGCGGCTATGAGAATTAAACCGGAATGGGCGGTCCTTGCCACACTGGCTCGGACAGCGGTCATGAATGCAAATCGGGGATGTGGTTGCTCCGCAACTGACGTAAGAATACATAGGGAAACCGATAAGAACGGGTGTCGAGTCTTTCCTCATCGACGTTGTGTGTGAGGATAATACTTGGGGTTTTTGAAGCGATCGTG
CTTTTAACTTTATGATCGACAGCGGAGTTTATCTTCCTCGATTCACGCTAAGGCGGCATATGACAACATCGCTTATATTAATACAATCCGAGTTGGTGCTGGGAGACCAACCTATACAATTCGTGCGACGGTTATGCGCCATATGCCCTTGAGATATGGACGTTTATATCCCTTCGGGCTACCAGATCGTTTCGTGGTTGTAACGTGAGAAATGCTTGGCCACTGGGTAATCTGGATAGCCGCTCAAGCTCATGGACTCGCCTATGGAAGGTGCCGGACAACACGAGCCAAGTGCGCCACTGGTTGGCCATTATCCTATTTTTCAATTCTA
AGACAAATCTCTATGAATCCGACGTCCCCAATACATTCATGGCATGTGCTACACTCACCCGAAGTTCACATGAGGCTCTAAATACAAACAACGGTAGAGCGATATCATGCTTCAGTCCATATCGACGGCGTAACGTGCGGTGATATATTAGTTACCAGAGTCTCCAGCTTTGCAACAGAACGACTAACCGCCATAGATGCAGAAGGGGCGTTAACCTTTGCTGACCCACGAGAACCGATAGCGTTTTCCCAGTTTTGATCTTAGCACTATTTGTATTACAAGTTTTCACCTCTCAGTCGAGGACCGCTTCCGCTCGGACACTCCAACAAGT
"""
lines=input.splitlines()
k = int(lines[0].split(" ")[0])
t = int(lines[0].split(" ")[1])
N = int(lines[0].split(" ")[2])
dna=[]
for i in range(1,len(lines)):
  dna.append(lines[i])

BestMotifs = GibbsSampler(dna,k,t,N)
for i in range(1,20):
    Motifs = GibbsSampler(dna,k,t,N)
    if Score(Motifs) < Score(BestMotifs):
        BestMotifs = Motifs
for bm in BestMotifs:
  print(bm)
