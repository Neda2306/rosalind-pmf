import itertools

def HammingDistance(p,q):
  if len(p)!=len(q):
    return -1
  dist=0
  for i in range(0,len(p)):
    if p[i]!=q[i]:
      dist+=1
  return dist

def GenerateArray(k):
  base=["A","C","G","T"]
  array=list()
  comb=[p for p in itertools.product(base,repeat=k)]

  for element in comb:
    pattern=""
    for i in range(len(element)):
      pattern=pattern+element[i]
    array.append(pattern)
  
  return array

def NeighBours(pattern,d):
  array=GenerateArray(len(pattern))
  kmers=[]

  for element in array:
    if HammingDistance(element,pattern)<=d:
      kmers.append(element)
  return kmers

def PatternAppear(pattern,text,d):
  for i in range(0,len(text)-len(pattern)+1):
    if HammingDistance(pattern,text[i:(i+len(pattern))])<=d:
      return True
  return False

def MotifEnumeration(DnaList,k,d):
  patterns=[]
  neighbours=set()
  
  for element in DnaList:
    for i in range(0,len(element)-k+1):
      ngb=NeighBours(element[i:(i+k)],d)
      neighbours=neighbours.union(ngb)
  
  for element in neighbours:
    appear=True
    for i in range(len(DnaList)):
      if not PatternAppear(element,DnaList[i],d):
        appear=False
        break
    if appear:
      patterns.append(element)
  
  return list(set(patterns))

res=MotifEnumeration(input().split(" "),int(input()),int(input()))
for element in res:
  print(element)
