def Text(text,i,k):
  return text[i:(i+k)]

def ReverseComplement(pattern):
  complement=""
  for letter in pattern:
    if letter=="A":
      complement=complement+"T"
    if letter=="T":
      complement=complement+"A"
    if letter=="C":
      complement=complement+"G"
    if letter=="G":
      complement=complement+"C"
  return complement[::-1]

GeneticCode={
    'AAA': 'K',     'CAA': 'Q',     'GAA': 'E',     'UAA': '*',
    'AAC': 'N',     'CAC': 'H',     'GAC': 'D',     'UAC': 'Y',
    'AAG': 'K',     'CAG': 'Q',     'GAG': 'E',     'UAG': '*',
    'AAU': 'N',     'CAU': 'H',     'GAU': 'D',     'UAU': 'Y',
    'ACA': 'T',     'CCA': 'P',     'GCA': 'A',     'UCA': 'S',
    'ACC': 'T',     'CCC': 'P',     'GCC': 'A',     'UCC': 'S',
    'ACG': 'T',     'CCG': 'P',     'GCG': 'A',     'UCG': 'S',
    'ACU': 'T',     'CCU': 'P',     'GCU': 'A',     'UCU': 'S',
    'AGA': 'R',     'CGA': 'R',     'GGA': 'G',     'UGA': '*',
    'AGC': 'S',     'CGC': 'R',     'GGC': 'G',     'UGC': 'C',
    'AGG': 'R',     'CGG': 'R',     'GGG': 'G',     'UGG': 'W',
    'AGU': 'S',     'CGU': 'R',     'GGU': 'G',     'UGU': 'C',
    'AUA': 'I',     'CUA': 'L',     'GUA': 'V',     'UUA': 'L',
    'AUC': 'I',     'CUC': 'L',     'GUC': 'V',     'UUC': 'F',
    'AUG': 'M',     'CUG': 'L',     'GUG': 'V',     'UUG': 'L',
    'AUU': 'I',     'CUU': 'L',     'GUU': 'V',     'UUU': 'F'
}

def GetKmers(text,k):
  kmers=[]
  for i in range(0,len(text)-k+1):
    kmers.append(Text(text,i,k))
  return kmers

def ProteinTranslation(pattern):
  peptide=""
  for i in range(0,len(pattern),3):
    code=Text(pattern,i,3)
    if GeneticCode[code]=="*":
      break
    peptide=peptide+GeneticCode[code]
  return peptide

def DnaToRna(pattern):
  return pattern.replace("T","U")

def PeptideEncoding(text,peptide):
  k=len(peptide)*3
  kmers=GetKmers(text,k)
  podstrings=[]
  for kmer in kmers:
    rna=DnaToRna(kmer)
    revComplemet=ReverseComplement(kmer)
    if ProteinTranslation(rna)==peptide or ProteinTranslation(DnaToRna(revComplemet))==peptide:
      podstrings.append(kmer)
  return podstrings

res=PeptideEncoding(input(),input())
for element in res:
  print(element)
