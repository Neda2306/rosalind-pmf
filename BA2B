import itertools

def GenerateArray(k):
  base=["A","C","G","T"]
  array=list()
  comb=[p for p in itertools.product(base,repeat=k)]

  for element in comb:
    pattern=""
    for i in range(len(element)):
      pattern=pattern+element[i]
    array.append(pattern)
  return array

def HammingDistance(p,q):
  if len(p)!=len(q):
    return -1
  dist=0
  for i in range(len(p)):
    if p[i]!=q[i]:
      dist+=1
  return dist

def MinHammingDistance(kmer,text):
  min=len(text)
  for i in range(len(text)-len(kmer)+1):
    distance=HammingDistance(kmer,text[i:(i+len(kmer))])
    if distance<min:
      min=distance
  return min

def MedianString(k,dnaList):
  kmers=GenerateArray(k)
  median=""
  minSum=k*len(dnaList)

  for kmer in kmers:
    sum=0
    for dna in dnaList:
      sum=sum+MinHammingDistance(kmer,dna)
    if sum<minSum:
      minSum=sum
      median=kmer
  return median

res=MedianString(int(input()),input().split(" "))
print(res)
